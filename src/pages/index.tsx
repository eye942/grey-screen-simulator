import { PlatformId } from "@fightmegg/riot-rate-limiter";
import { type NextPage } from "next";
import Head from "next/head";
import { useReducer, useMemo, Suspense } from "react";
import { useForm, type SubmitHandler } from "react-hook-form";
import type { DeathDTO } from "~/server/api/routers/matches";


import { api } from "~/utils/api";

type Region = PlatformId.EUW1 | PlatformId.EUNE1 | PlatformId.NA1 | PlatformId.LA1 | PlatformId.LA2 | PlatformId.KR | PlatformId.JP1 | PlatformId.BR1 | PlatformId.OC1 | PlatformId.RU | PlatformId.TR1;

interface IFormInput {
  summonerName: string;
  region: Region;
}

interface IState {
  summonerName: string,
  region: Region,
  playerId: string|null
}

enum ActionType {
  SEARCH,
}

interface SEARCH {
  type: ActionType.SEARCH,
  payload: IFormInput
}

interface Player {
  playerId: string,
  region: Region
}

type Action = SEARCH;

function reducer(state: IState, action: Action) {
  switch (action.type) {
    case ActionType.SEARCH:
      if(state.summonerName === action.payload.summonerName && state.region === action.payload.region){
        return state;
      }

      return {...state, ...action.payload };
  }
}

const Spinner = ()=>(
  <div className="inline-flex items-center px-4 py-2 font-semibold leading-6 text-sm shadow rounded-md text-white bg-indigo-500 hover:bg-indigo-400 transition ease-in-out duration-150 cursor-not-allowed">
      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="cyan" stroke-width="4"></circle>
        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      Loading...
    </div>
)

const Display = (props: { player: Player}) => {
  const [matchIds, ] = api.matches.matchIds.useSuspenseQuery(props.player);
  const matchParams = useMemo(()=>({...props.player, matchIds}),[props,matchIds])
  const [matches, matchesQuery] = api.matches.matches.useSuspenseQuery(matchParams);

  const totalDeathTime = useMemo(()=>
    ((matches??[]).reduce((x:number,y)=>x+(y?.totalTimeSpentDead??0)/60, 0)), [matches]);
  const totalDeaths = useMemo(()=>((matches??[]).reduce((x:number,y)=>x+(y?.deaths??0),0)),[matches])
  return (<>
    <div>
      <p className="text-white mb-0"><dfn>Total Time Dead: </dfn><output className="animate-pulse text-red-400">{totalDeathTime}</output> min</p>
      <p className="text-white"><dfn>Average Death Length: </dfn><output className="animate-pulse text-red-400">{totalDeathTime/totalDeaths}</output> min</p>
    </div>
    <div>
      <h2 className="text-lg font-bold text-white">Group of matches</h2>
      {matchesQuery.isFetched?
        (<table className="table-auto border-collapse text-white text-center border-white border-spacing-2 border">
          <thead>
            <tr>
            <th className="border border-slate-500 px-2">Game</th><th className="border border-slate-500 px-2">Death times</th><th className="border border-slate-500 px-2">Deaths</th>
            </tr>
          </thead>
          <tbody>
            {matches?.map((m:DeathDTO) => 
              (<tr key={m.matchId}>
                <td>{m.matchId}</td><td>{m.totalTimeSpentDead} s</td><td>{m.deaths}</td>
              </tr>)
            )}
          </tbody>
        </table>):
        <p className="text-white">Missing</p>
      }
    </div>
  </>)
}

const Home: NextPage = () => {
  const [state, dispatch] = useReducer(reducer, { summonerName: "", region: PlatformId.NA1, playerId:null });
  const playerIdQuery = api.matches.summonerId.useQuery({username:state.summonerName,region:state.region},{enabled:state.summonerName!==""});

  const player = useMemo(()=>({playerId:playerIdQuery.data??null,region:state.region}),[state,playerIdQuery]);

  const { register, handleSubmit } = useForm<IFormInput>();
  const onSubmit: SubmitHandler<IFormInput> = (formInput) => {
    dispatch({ type: ActionType.SEARCH, payload: formInput});
  };

  return (
    <>
      <Head>
        <title>Grey Screen Simulator</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Seen grey much?
          </h1>
          {// eslint-disable-next-line @typescript-eslint/no-misused-promises
          }<form onSubmit={handleSubmit(onSubmit)} className="grid grid-cols-1" >
            <label className="block">
              <span className="block text-sm font-medium text-white">Summoner name</span>
              <input type="text" className="peer px-4 py-1 my-1 text-m font-semibold rounded-full border border-black" {...register("summonerName", { required: true })} />
            </label>
            <input className="px-4 py-1 text-sm text-white font-semibold rounded-full border border-purple-200 hover:text-white hover:bg-purple-600 hover:border-transparent focus:outline-none focus:ring-2 focus:ring-purple-600 focus:ring-offset-2"
              type="submit" value="See Total Deaths!" />
          </form>
          { player.playerId !== null?
          <Suspense fallback={<Spinner />}>
            <Display player={player as Player} />
          </Suspense>: ""
          }
        </div>
      </main>
    </>
  );
};

export default Home;
